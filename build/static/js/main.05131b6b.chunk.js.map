{"version":3,"sources":["Login.js","Artist.js","Search.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["login","props","url","encodeURIComponent","containerStyle","padding","titleStyle","marginBottom","window","location","hash","react_default","a","createElement","style","children","textDecoration","href","width","border","backgroundColor","color","textAlign","boxSizing","artist","_ref","name","image","onClickHandler","display","alignItems","paddingBottom","onClick","src","height","marginRight","fontSize","fontWeight","search","type","onChange","onChangeHandler","placeholder","info","buttonHandler","textStyle","margin","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","spotify","SpotifyWebApi","setClientTokens","bind","assertThisInitialized","backButtonHandler","selected","pathArray","split","clientInfo","forEach","item","index","replace","undefined","access_token","objectSpread","loggedIn","setAccessToken","event","_this2","target","value","searchArtists","limit","error","data","console","log","artists","items","map","Artist","key","id","images","setState","artistList","_this3","getArtistRelatedArtists","relatedArtists","Login","Info","Search","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05131b6b.chunk.js","sourcesContent":["import React from 'react';\n\nconst login = (props) => {\n    var clientId = '14b4201cd7a14ba09d298bb2b48cc09a'; // Your client id\n    var redirectUri = 'http://localhost:3000/'; // Your redirect uri\n    var scope = '';\n    var state = '123';  \n      \n    let url = 'https://accounts.spotify.com/authorize' + \n    '?client_id=' + clientId +\n    '&redirect_uri=' + encodeURIComponent(redirectUri) +\n    '&scope=' + encodeURIComponent(scope) +\n    '&response_type=token' +\n    '&states=' + encodeURIComponent(state);\n\n    const containerStyle = {\n        padding: '30px'\n      };\n      const titleStyle = {\n        marginBottom: '20px'\n      }\n      const buttonStyle = {\n        width: '200px',\n        border: '2px solid black',\n        backgroundColor: 'black',\n        color: 'white',\n        textAlign: 'center',\n        padding: '10px',\n        marginBottom: '10px',\n        boxSizing: 'border-box'\n      }\n\n      const linkStyle = {\n          textDecoration: 'none'\n      }\n\n    if (!window.location.hash) {\n        return (\n            <div style={containerStyle}>\n                <h3 style={titleStyle}>DiscoverArtists</h3>\n                <a style={linkStyle} href={url}><div style={buttonStyle}>Login To Spotify</div></a>\n            </div>\n            );\n    } else {\n        return (\n        <div style={containerStyle}>\n            <h3 style={titleStyle}>DiscoverArtists</h3>\n            {props.children}\n        </div>);\n    }    \n}\n\nexport default login;","import React from \"react\";\n\nconst artist = ({name, image, onClickHandler}) => {\n  const containerStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    paddingBottom: '10px'\n  }\n\n  const imageStyle = {\n    width: '70px',\n    height: '70px',\n    marginRight: '20px',\n  }\n\n  const nameStyle = {\n    fontSize: '1.2em',\n    fontWeight: 'bolder'\n  }\n  return (\n    <div style={containerStyle} onClick={onClickHandler}>\n      <img src={image} style={imageStyle}/>\n      <div style={nameStyle}>{name}</div>\n    </div>\n  );\n}\n\nexport default artist;\n","import React from 'react';\n\nconst search = (props) => {\n\n      const inputStyle = {\n        width: '100%',\n        border: '2px solid #334',\n        padding: '10px',\n        boxSizing: 'border-box',\n        marginBottom: '30px'\n      };\n\n    \n    //   const buttonStyle = {\n    //     width: '100px',\n    //     height: '25px',\n    //     border: '2px solid black',\n    //     backgroundColor: 'black',\n    //     color: 'white',\n    //     fontSize: '1.2em',\n    //     textAlign: 'center',\n    //     padding: '5px',\n    //     marginBottom: '10px'\n    //   }\n\n    return (\n       <div> \n        <input style={inputStyle} type=\"text\" onChange={props.onChangeHandler} placeholder=\"Search for Artist\"/> </div>\n    );\n}\n\nexport default search;\n\n// html\n\n\n// styles\nconst containerStyle = {\n    padding: '30px'\n  };\n  const inputStyle = {\n    width: '100%',\n    border: '2px solid #334',\n    padding: '10px',\n    boxSizing: 'border-box',\n    marginBottom: '30px'\n  };\n  const titleStyle = {\n    marginBottom: '20px'\n  }\n\n  const buttonStyle = {\n    width: '100px',\n    height: '25px',\n    border: '2px solid black',\n    backgroundColor: 'black',\n    color: 'white',\n    fontSize: '1.2em',\n    textAlign: 'center',\n    padding: '5px',\n    marginBottom: '10px'\n  }","import React from 'react';\n\nconst info = ({name, buttonHandler}) => {\n    const buttonStyle = {\n        width: '100px',\n        border: '2px solid black',\n        backgroundColor: 'black',\n        color: 'white',\n        textAlign: 'center',\n        padding: '10px',\n        marginBottom: '10px',\n        boxSizing: 'border-box'\n    }\n\n    const textStyle = {\n        margin: '20px 0'\n    }\n\n\n    return (\n    <div>\n        <div style={buttonStyle} onClick={buttonHandler}>Back</div>\n        <div style={textStyle}>If you like <strong>{name}</strong></div>\n        <div style={textStyle}>You might like: </div>\n      </div>\n    );\n}\n\nexport default info;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport Login from './Login';\nimport Artist from './Artist';\nimport Search from './Search';\nimport Info from './Info';\n\n\nclass App extends Component {\n  state = {};\n  spotify = new SpotifyWebApi();\n  \n  constructor() {\n    super();\n    this.setClientTokens()\n    this.onChangeHandler = this.onChangeHandler.bind(this)\n    this.onClickHandler = this.onClickHandler.bind(this)\n    this.backButtonHandler = this.backButtonHandler.bind(this)\n    this.state = {\n      selected: false\n    }    \n\n  }\n\n  setClientTokens() {\n    let pathArray = window.location.hash.split('&');\n    let clientInfo  = {};\n    pathArray.forEach((item, index) => {\n      let split = item.split('=');\n      clientInfo[split[0].replace('#', '')] = split[1];\n    });\n    if (clientInfo.access_token !== undefined) {\n      this.state = {\n        ...this.state,\n        loggedIn: true\n      }; \n      this.spotify.setAccessToken(clientInfo.access_token);\n    }\n  }\n\n  onChangeHandler(event) {\n    if (event.target.value !== '') {\n      this.spotify.searchArtists(event.target.value, {limit: 20}, (error, data) => {\n        if (error) console.log(error)\n        else {\n          let artists = data.artists.items.map((item) => {\n            return <Artist \n              key={item.id}\n              name={item.name}\n              image={(item.images[2]) ? item.images[2].url: 'https://via.placeholder.com/70'}\n              onClickHandler={() => this.onClickHandler(item.id, item.name, event)}\n            />\n          });\n          this.setState({\n            ...this.state,\n            artistList: artists\n          });\n        }\n      });\n    }\n  }\n\n  backButtonHandler(event) {\n    this.setState({\n      ...this.state,\n      selected: false,\n      artistList: ''\n    });\n  }\n\n\n  onClickHandler(id, name, event) {\n    console.log(name);\n    this.setState({\n      ...this.state,\n      selected: true,\n      name: name,\n      artistList: ''\n    });\n\n    this.spotify.getArtistRelatedArtists(id, (error, data) => {\n      if (error) console.log(error);\n      else {\n        let relatedArtists = data.artists.map((item) => {\n          return <Artist \n            key={item.id}\n            name={item.name}\n            image={(item.images[2]) ? item.images[2].url: 'https://via.placeholder.com/70'}\n            onClickHandler={() => this.onClickHandler(item.id, item.name, event)}\n          />\n        });\n        this.setState({\n          ...this.state,\n          artistList: relatedArtists\n        });\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <Login>\n        {!this.state.selected ? \n          <Search onChangeHandler={this.onChangeHandler}/>: \n          <Info name={this.state.name} buttonHandler={this.backButtonHandler}/>\n        }\n        {this.state.artistList}\n      </Login>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Login from './Login'\nimport Search from './Search';\nimport Related from './Artist';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}